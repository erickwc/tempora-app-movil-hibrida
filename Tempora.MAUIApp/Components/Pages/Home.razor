@page "/home"
@inject NavigationManager navManager
@inject UsuarioService usuarioService
@inject PeriodoService periodoService
@inject EstadoService estadoService
@inject IJSRuntime jsRuntime

<main style="gap:24px; display:flex; flex-direction:column; height:100vh;">

    <section class="mt-4" style="gap:16px; display:flex; justify-content:space-between; align-items:center;">
        <div>
            <h1 class="t16">@nombre</h1>
            <p class="parr">@fechaHoraActual</p>
        </div>
        <div>
            <button @onclick="Settings" class="btn-goback"> <img src="/Images/setting.svg" alt="Alternate Text" /> </button>
        </div>
    </section>

    <section>
        <div class="inp-cont">
            <img class="ico-inp left" src="/Images/search.svg" alt="Alternate Text" />
            <input @bind="periodo.Nombre" @bind:event="oninput" @onkeyup="Buscar" placeholder="Busca un periodo por el nombre" class="inp parr" type="text" />
        </div>
    </section>

    <section class="d-flex" style="gap:8px;">
        <p class="parr">Tipo: </p>
        <select @bind="periodo.EstadoId" @bind:event="oninput" @onchange="Buscar" class="select">
            @foreach (var item in estados)
            {
                <option value="@item.EstadoId">@item.Nombre</option>
            }
        </select>
    </section>

    <section class="d-flex justify-content-between">
        <h2 class="t20">Periodos</h2>
        <p class="parr">@periodos.Count Periodos registrados</p>
    </section>

    <section class="d-grid" style="gap:24px; padding-bottom:100px; z-index:2; position: relative;">
        @if (periodos.Count > 0)
        {
            @foreach (var (periodo, index) in periodos.Select((p, i) => (p, i)))
            {
                <section @onclick="() => VerPeriodo(periodo.PeriodoId)" class="card-period grid" style="gap:42px; background-color:@GetBackgroundColor(index);">
                    <div class="d-flex justify-content-between align-items-center">
                        <p class="status">
                            @(periodo.EstadoId == 2 ? "Pendiente" : periodo.EstadoId == 1 ? "Finalizado" : "Desconocido")
                        </p>
                        <span @onclick="() => EditarPeriodo(periodo.PeriodoId)" @onclick:stopPropagation class="bton-card">
                            <img src="/Images/sttngcard.svg" alt="Alternate Text" />
                        </span>
                    </div>
                    <div class="grid" style="gap:16px;">
                        <div class="grid" style="gap:8px;">
                            <h3 class="t16">@periodo.Nombre</h3>
                            <p class="parr">@periodo.FechaRegistro.ToString("d 'de' MMMM yyyy")</p>
                        </div>
                        <div>
                            <p style="text-align:end;" class="parr">@periodo.HorasPendientes horas restantes</p>
                            <progress value="@CalcularProgreso(periodo.HorasRealizadas)" max="100"></progress>
                        </div>
                    </div>
                </section>
            }
        }
        else
        {
            <p>No hay periodos registrados.</p>
        }
    </section>

    <button @onclick="NuevoPeriodo" style="z-index:3; position: fixed; bottom: 24px; left: 24px; right: 24px; width: calc(100% - 48px);" class="bton bton-black" type="submit">Nuevo periodo</button>

</main>

@code {
    int usuarioId;
    private string nombre;
    private string fechaHoraActual;
    private List<Periodo> periodos = new List<Periodo>();
    private List<Estado> estados = new List<Estado>();
    Periodo periodo = new Periodo();


    private int CalcularProgreso(string horasRealizadas)
    {
        int horas = 0;
        int minutos = 0;

        var partes = horasRealizadas.Split(' ');

        if (int.TryParse(partes[0], out horas))
        {
            if (partes.Length > 3 && int.TryParse(partes[3], out minutos))
            {
                horas += minutos / 60; 
            }
        }

        return horas; 
    }

    private string[] colores = { "#FBF0FF", "#EBFFFB", "#FDF6E3", "#F0F4FF" };

    private string GetBackgroundColor(int index)
    {
        return colores[index % colores.Length];
    }

    protected override async Task OnInitializedAsync()
    {
        string dato = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "UsuarioId");
        usuarioId = Convert.ToInt32(dato);

        nombre = await usuarioService.ObtenerNombrePorId(usuarioId);

        // Llama al método para obtener los periodos del usuario
        periodos = await periodoService.BuscarPorUsuarioId(usuarioId);


        estados = await estadoService.ObtenerTodos();

    }

    private async Task Buscar()
    {
        if(periodo.EstadoId > 0 || !string.IsNullOrWhiteSpace(periodo.Nombre))
        {
            periodos = await periodoService.Buscar(periodo);
        }
        else
        {
            periodos = await periodoService.BuscarPorUsuarioId(usuarioId);
        }
    }

    protected override void OnInitialized()
    {
        ActualizarFechaHora();
        var timer = new System.Timers.Timer(60000); // 1 minuto
        timer.Elapsed += (sender, e) =>
        {
            ActualizarFechaHora();
            InvokeAsync(StateHasChanged);
        };
        timer.Start();
        
    }

    private void ActualizarFechaHora()
    {
        var ahora = DateTime.Now;
        fechaHoraActual = ahora.ToString("d 'de' MMMM - h:mm tt", new System.Globalization.CultureInfo("es-ES"));
    }

    private void NuevoPeriodo()
    {
        navManager.NavigateTo("/newperiod");
    }

    private void VerPeriodo(int periodoId)
    {
        navManager.NavigateTo($"/days/{periodoId}");
    }

    private void EditarPeriodo(int periodoId)
    {
        navManager.NavigateTo($"/editperiod/{periodoId}");
    }

    private void Settings()
    {
        navManager.NavigateTo("/settings");
    }

    
   
}
