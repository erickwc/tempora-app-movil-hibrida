@page "/newday/{periodoId:int}"
@inject NavigationManager navManager
@inject DiaService diaService

<main style="gap:24px; display:flex; flex-direction:column; justify-content:space-between; height:100vh;">

    <section class="d-grid" style="gap:48px;">
        <section class="mt-4" style="gap:24px; display:flex; align-items:center;">
            <button @onclick="Regresar" class="btn-goback"> <img src="/Images/back.svg" alt="Alternate Text" /> </button>
            <div>
                <h1 class="t20">Nuevo día</h1>
                <p class="parr">Agrega un nuevo día</p>
            </div>
        </section>


        <section class="d-grid" style="gap:48px;">
            
            <div class="d-grid" style="gap:24px;">
                <section class="grid">
                    <h1 class="t16">Fecha de actividad</h1>
                </section>

                <section class="grid" style="gap:24px;">
                    <div class="grid" style="gap:10px;"> 
                        <label>Fecha de Actividad</label>
                        <div class="inp-cont" style="display: flex; align-items: center;">
                            <img class="ico-inp left" src="/Images/date.svg" alt="Alternate Text" />
                            <input type="date" class="inp parr" @bind="dia.Fecha" />
                        </div>
                    </div>
                </section>


               
            </div>

            <div class="d-grid" style="gap:24px;">
                
                <section class="d-flex justify-content-between align-items-center">
                <section class="grid">
                    <h1 class="t16">Turno de la mañana</h1>
                </section>
                    <img data-bs-toggle="modal" data-bs-target="#staticBackdrop" src="/Images/quest.svg" alt="Alternate Text" />
                </section>

                <section class="d-grid" style="gap:24px; grid-template-columns:1fr 1fr;">
                    <div class="grid" style="gap:10px;">
                        <label>Hora de inicio</label>
                        <div class="inp-cont">
                            <img class="ico-inp left" src="/Images/hours.svg" alt="Alternate Text" />
                            <input placeholder="Ingresa la hora" class="inp parr" type="time"
                                   @onchange="(e) => {
                                     dia.HoraInicioManana = TimeSpan.Parse(e.Value.ToString());
                                    CalcularHorasTotales();}" />
                        </div>
                    </div>

                    <div class="grid" style="gap:10px;">
                        <label>Hora de finalización</label>
                        <div class="inp-cont">
                            <img class="ico-inp left" src="/Images/hours.svg" alt="Alternate Text" />
                            <input placeholder="Ingresa la hora" class="inp parr" type="time"
                                   @onchange="(e) => {
           dia.HoraFinManana = TimeSpan.Parse(e.Value.ToString());
           CalcularHorasTotales();
       }" />
                        </div>
                    </div>
                </section>
            </div>

            <div class="d-grid" style="gap:24px;">
                <section class="grid">
                    <h1 class="t16">Turno de la tarde</h1>
                </section>

                <section class="d-grid" style="gap:24px; grid-template-columns:1fr 1fr;">
                    <div class="grid" style="gap:10px; width:100%;">
                        <label>Hora de inicio</label>
                        <div class="inp-cont">
                            <img class="ico-inp left" src="/Images/hours.svg" alt="Alternate Text" />
                            <input placeholder="Ingresa la hora" class="inp parr" type="time"
                                   @onchange="(e) => {
           dia.HoraInicioTarde = TimeSpan.Parse(e.Value.ToString());
           CalcularHorasTotales();
       }" />
                        </div>
                    </div>

                    <div class="grid" style="gap:10px; width:100%;">
                        <label>Hora de finalización</label>
                        <div class="inp-cont">
                            <img class="ico-inp left" src="/Images/hours.svg" alt="Alternate Text" />
                            <input placeholder="Ingresa la hora" class="inp parr" type="time"
                                   @onchange="(e) => {
           dia.HoraFinTarde = TimeSpan.Parse(e.Value.ToString());
           CalcularHorasTotales();
       }" />
                        </div>
                    </div>
                </section>
            </div>


            <div class="grid" style="gap:10px; width:100%;">
                <label>Total de horas</label>
                <div class="inp-cont">
                    <img class="ico-inp left" src="/Images/hours.svg" alt="Alternate Text" />
                    <input placeholder="" class="inp parr" value="@dia.HorasTotales" readonly />
                </div>
            </div>


            <div class="grid d-none" style="gap:10px; width:100%; pointer-events:none;">
                <label>Id Periodo</label>
                <div class="inp-cont">
                    <img class="ico-inp left" src="/Images/hours.svg" alt="Alternate Text" />
                    <input placeholder="Ingresa el Id del periodo" class="inp parr" type="number"
                           value="@dia.PeriodoId" @onchange="(e) => dia.PeriodoId = int.Parse(e.Value.ToString())" />
                </div>
            </div>


        </section>
    </section>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error">@errorMessage</div>
    }

    <button @onclick="Guardar" class="bton bton-black" style="margin-bottom:24px; margin-top:48px;">Guardar nuevo día</button>

</main>


<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content d-grid" style="padding:32px 16px; gap:24px; border-radius:24px; margin:0px 16px;">
            <div class="d-grid" style="gap:8px;">
                <h2 class="t20 center">Turnos opcionales</h2>
                <p class="parr center">Si solo realizas el turno de la mañana puedes dejar el turno de la tarde vacio o viceversa.</p>
            </div>
            <div class="d-grid" style="gap:8px;">
                <button data-bs-dismiss="modal" aria-label="Close" class="bton bton-black">Regresar</button>
            </div>
        </div>
    </div>
</div>


@code {
    Dia dia = new Dia();
    private string errorMessage; // Mensaje de error

    [Parameter]
    public int periodoId { get; set; }

    protected async Task Guardar()
    {
        errorMessage = string.Empty; // Reiniciar el mensaje de error

        // Llama a la función de validación
        if (!ValidarCampos())
        {
            return; // Si hay un error, se detiene la ejecución
        }

        // Asegurarse de que las horas no se guarden como null
        dia.HoraInicioManana ??= TimeSpan.Zero;
        dia.HoraFinManana ??= TimeSpan.Zero;
        dia.HoraInicioTarde ??= TimeSpan.Zero;
        dia.HoraFinTarde ??= TimeSpan.Zero;

        Dia obj = await diaService.Guardar(dia);
        Regresar();
    }

    private bool ValidarCampos()
    {
        // Validar que al menos un turno tenga horas
        bool tieneTurnoManana = dia.HoraInicioManana.HasValue || dia.HoraFinManana.HasValue;
        bool tieneTurnoTarde = dia.HoraInicioTarde.HasValue || dia.HoraFinTarde.HasValue;

        if (!tieneTurnoManana && !tieneTurnoTarde)
        {
            errorMessage = "Debes ingresar horas en al menos un turno (mañana o tarde).";
            return false;
        }

        // Validar que la fecha no sea la por defecto
        if (dia.Fecha == default)
        {
            errorMessage = "La fecha no puede estar vacía. Por favor, selecciona una fecha válida.";
            return false;
        }

        return true; // Todos los campos son válidos
    }

    protected override void OnInitialized()
    {
        dia.PeriodoId = periodoId;
        // Inicializa la fecha con una fecha válida, por ejemplo, hoy
        dia.Fecha = DateTime.Today;
    }

    private void Regresar()
    {
        navManager.NavigateTo($"/days/{periodoId}");
    }

    private void CalcularHorasTotales()
    {
        TimeSpan horasManana = (dia.HoraFinManana ?? TimeSpan.Zero) - (dia.HoraInicioManana ?? TimeSpan.Zero);
        TimeSpan horasTarde = (dia.HoraFinTarde ?? TimeSpan.Zero) - (dia.HoraInicioTarde ?? TimeSpan.Zero);

        if (horasManana < TimeSpan.Zero) horasManana = TimeSpan.Zero;
        if (horasTarde < TimeSpan.Zero) horasTarde = TimeSpan.Zero;

        TimeSpan totalHoras = horasManana + horasTarde;

        dia.HorasTotales = totalHoras.ToString(@"h\:mm");
    }

    private void SetTodayDate()
    {
        dia.Fecha = DateTime.Today;
    }
}
